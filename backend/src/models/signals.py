# Trading signal models
"""
Core trading signal and related data structures
"""

from datetime import datetime
from typing import Dict, Any, Optional
from dataclasses import dataclass
from enum import Enum

class OptionType(Enum):
    """Option types"""
    CALL = "CE"
    PUT = "PE"

class OrderSide(Enum):
    """Order side types"""
    BUY = "BUY"
    SELL = "SELL"

class PositionStatus(Enum):
    """Position status types"""
    OPEN = "OPEN"
    CLOSED = "CLOSED"
    PARTIALLY_CLOSED = "PARTIALLY_CLOSED"

@dataclass
class Signal:
    """Trading signal generated by strategies"""
    symbol: str
    option_type: OptionType
    strike: float
    quality_score: float
    quantity: int = 0
    stop_loss_percent: float = 0.6
    target_percent: float = 1.0
    metadata: Dict[str, Any] = None
    timestamp: datetime = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}
        if self.timestamp is None:
            self.timestamp = datetime.now()

@dataclass 
class Position:
    """Trading position"""
    position_id: str
    symbol: str
    quantity: int
    average_entry_price: float
    current_price: float
    entry_time: datetime
    status: PositionStatus
    unrealized_pnl: float = 0.0
    realized_pnl: float = 0.0
    exit_time: Optional[datetime] = None
    
    def update_pnl(self, current_price: float):
        """Update P&L based on current price"""
        self.current_price = current_price
        price_diff = current_price - self.average_entry_price
        self.unrealized_pnl = price_diff * self.quantity
    
    def close(self, exit_price: float):
        """Close the position"""
        self.status = PositionStatus.CLOSED
        self.current_price = exit_price
        self.exit_time = datetime.now()
        price_diff = exit_price - self.average_entry_price
        self.realized_pnl = price_diff * self.quantity
        self.unrealized_pnl = 0.0
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert position to dictionary"""
        return {
            'position_id': self.position_id,
            'symbol': self.symbol,
            'quantity': self.quantity,
            'average_entry_price': self.average_entry_price,
            'current_price': self.current_price,
            'unrealized_pnl': self.unrealized_pnl,
            'realized_pnl': self.realized_pnl,
            'entry_time': self.entry_time.isoformat(),
            'exit_time': self.exit_time.isoformat() if self.exit_time else None,
            'status': self.status.value
        }

@dataclass
class MarketData:
    """Market data structure"""
    symbol: str
    ltp: float
    bid: float
    ask: float
    volume: int
    timestamp: datetime
    open_price: float = 0.0
    high_price: float = 0.0
    low_price: float = 0.0
    change_percent: float = 0.0
    price_history: list = None
    
    def __post_init__(self):
        if self.price_history is None:
            self.price_history = []